---
import { LocalePath } from "~/utils/StaticPathHelper";
export function getStaticPaths() {
    return LocalePath();
}

import i18n from "~/components/i18n/index.js";
import MapPopup from ".//CountryDetailPanel/SlideOutPanel.astro";
import CountryLinks from "./CountryLinks.astro";
import bal from "../../data/country_data.json";
import CirclePoints from "./CountryRankCircles/CirclePoints.astro";

import { getLanguageFromPath, SITE } from "~/config.js";

const locale = getLanguageFromPath(Astro.url);
const t = i18n[locale];
---

<div class="relative">
    <span class="absolute bottom-0 left-1/2 transform -translate-x-1/2 inline-flex rounded-t-md shadow-xs z-50">
        <a
            href={`/${locale}/countries`}
            class="relative inline-flex items-center rounded-tl-md bg-white px-3 py-2 text-sm font-semibold text-stone-900 ring-1 ring-stone-300 ring-inset hover:bg-stone-50 focus:z-10"
        >
            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16" fill="currentColor" class="-ml-0.5 mr-1 size-4">
                <path
                    d="M2 4a2 2 0 0 1 2-2h8a2 2 0 1 1 0 4H4a2 2 0 0 1-2-2ZM2 9.25a.75.75 0 0 1 .75-.75h10.5a.75.75 0 0 1 0 1.5H2.75A.75.75 0 0 1 2 9.25ZM2.75 12.5a.75.75 0 0 0 0 1.5h10.5a.75.75 0 0 0 0-1.5H2.75Z"
                ></path>
            </svg>
            List View
        </a>
        <button
            id="access-rank-button"
            type="button"
            class="relative -ml-px inline-flex items-center bg-white px-3 py-2 text-sm font-semibold text-stone-900 ring-1 ring-stone-300 ring-inset hover:bg-stone-50 focus:z-10"
            >Access Rank</button
        >
        <button
            id="needs-rank-button"
            type="button"
            class="relative -ml-px inline-flex items-center rounded-tr-md bg-white px-3 py-2 text-sm font-semibold text-stone-900 ring-1 ring-stone-300 ring-inset hover:bg-stone-50 focus:z-10"
            >Needs Rank</button
        >
    </span>

    <div id="map-controls" class="z-30 absolute top-4 left-4 flex flex-col">
        <button
            id="zoom-in-button"
            title="Zoom In"
            class="text-white text-2xl bg-stone-900 dark:bg-stone-950 rounded-lg w-8 h-8">+</button
        >
        <button
            id="zoom-out-button"
            title="Zoom Out"
            class="text-white text-2xl bg-stone-900 dark:bg-stone-950 rounded-lg w-8 h-8 mt-2">-</button
        >
    </div>
    <svg
        id="worldmap"
        class="w-full h-[75vh] z-0 relative bg-stone-800 dark:bg-stone-900 access-rank"
        xmlns="http://www.w3.org/2000/svg"
        xmlns:xlink="http://www.w3.org/1999/xlink"
        id="svg2"
        version="1.0"
        viewBox="83 45 2528 1200"
    >
        <CountryLinks />
        <CirclePoints {bal} />
    </svg>
</div>

<MapPopup />

<div id="tooltip" class="absolute hidden bg-stone-800 text-white px-2 rounded-md pointer-events-none"></div>
<script>
import { openSlideoutPanel } from "./CountryDetailPanel/slideout-panel.js";

document.addEventListener("DOMContentLoaded", initializeSvgInteractions);
document.addEventListener("astro:after-swap", initializeSvgInteractions);

function initializeSvgInteractions() {
  const svg = document.getElementById("worldmap");
  const tooltip = document.getElementById("tooltip");

  if (!svg) return;

  let isPanning = false;
  let startX = 0,
    startY = 0;
  let viewBox = { x: 0, y: 0, width: 800, height: 600 };

  function setInitialViewBox() {
    const svgRect = svg.getBoundingClientRect();
    const contentWidth = 2528;
    const contentHeight = 1200;
    const contentAspectRatio = contentWidth / contentHeight;
    const containerAspectRatio = svgRect.width / svgRect.height;
    let viewBoxWidth, viewBoxHeight;

    if (containerAspectRatio > contentAspectRatio) {
      viewBoxHeight = contentHeight;
      viewBoxWidth = contentHeight * containerAspectRatio;
    } else {
      viewBoxWidth = contentWidth;
      viewBoxHeight = contentWidth / containerAspectRatio;
    }

    viewBox = {
      x: 83 - (viewBoxWidth - contentWidth) / 2,
      y: 45 - (viewBoxHeight - contentHeight) / 2,
      width: viewBoxWidth,
      height: viewBoxHeight,
    };

    svg.setAttribute("viewBox", `${viewBox.x} ${viewBox.y} ${viewBox.width} ${viewBox.height}`);
  }

  svg.addEventListener("mouseover", showTooltip);
  svg.addEventListener("mousemove", showTooltip);
  svg.addEventListener("mouseout", () => {
    tooltip.style.display = "none";
  });

  function showTooltip(event) {
    const target = event.target.closest("a");
    if (target) {
      const title = target.getAttribute("title");
      if (title) {
        tooltip.style.left = `${event.clientX + 10}px`;
        tooltip.style.top = `${event.clientY + 10}px`;
        tooltip.innerText = title;
        tooltip.style.display = "block";
      }
    }
  }

  svg.addEventListener("mousedown", (e) => {
    isPanning = true;
    startX = e.clientX;
    startY = e.clientY;
  });

  svg.addEventListener("mousemove", (e) => {
    if (isPanning) {
      viewBox.x += startX - e.clientX;
      viewBox.y += startY - e.clientY;
      svg.setAttribute("viewBox", `${viewBox.x} ${viewBox.y} ${viewBox.width} ${viewBox.height}`);
      startX = e.clientX;
      startY = e.clientY;
    }
  });

  svg.addEventListener("mouseup", () => (isPanning = false));
  svg.addEventListener("mouseleave", () => (isPanning = false));

  // Zoom
  svg.addEventListener("wheel", (e) => {
    e.preventDefault();
    const scaleFactor = 1 - e.deltaY * 0.002;
    zoom(scaleFactor, e.clientX, e.clientY);
  });

  function zoom(scaleFactor, clientX, clientY) {
    const svgPoint = svg.createSVGPoint();
    const loc = Object.assign(svgPoint, {
      x: clientX,
      y: clientY,
    }).matrixTransform(svg.getScreenCTM().inverse());

    const newWidth = viewBox.width * scaleFactor;
    const newHeight = viewBox.height * scaleFactor;

    if ((newWidth <= 5500 && newHeight <= 5500) || scaleFactor < 1) {
      if (newWidth >= 100 && newHeight >= 100) {
        viewBox.x = loc.x - (loc.x - viewBox.x) * scaleFactor;
        viewBox.y = loc.y - (loc.y - viewBox.y) * scaleFactor;
        viewBox.width = newWidth;
        viewBox.height = newHeight;
        svg.setAttribute("viewBox", `${viewBox.x} ${viewBox.y} ${viewBox.width} ${viewBox.height}`);
      }
    }
  }

  document.getElementById("zoom-in-button")?.addEventListener("click", () => {
    zoom(0.8, svg.clientWidth / 2, svg.clientHeight / 2);
  });

  document.getElementById("zoom-out-button")?.addEventListener("click", () => {
    zoom(1.2, svg.clientWidth / 2, svg.clientHeight / 2);
  });


  svg.addEventListener("click", openSlideoutPanel);
  document.getElementById("access-rank-button")?.addEventListener("click", () => toggleMapRankClass("access-rank"));
  document.getElementById("needs-rank-button")?.addEventListener("click", () => toggleMapRankClass("needs-rank"));


  function toggleMapRankClass(selectedClass) {
  const map = document.getElementById("worldmap");
  if (!map) return;

  const accessTexts = map.querySelectorAll('text[id^="access_"]');
  const needsTexts = map.querySelectorAll('text[id^="needs_"]');

  if (selectedClass === "access-rank") {
    accessTexts.forEach(text => text.setAttribute("visibility", "visible"));
    needsTexts.forEach(text => text.setAttribute("visibility", "hidden"));
  } else if (selectedClass === "needs-rank") {
    accessTexts.forEach(text => text.setAttribute("visibility", "hidden"));
    needsTexts.forEach(text => text.setAttribute("visibility", "visible"));
  } else {
    accessTexts.forEach(text => text.setAttribute("visibility", "hidden"));
    needsTexts.forEach(text => text.setAttribute("visibility", "hidden"));
  }

  // Swap bwl-logo-nX <=> bwl-logo-aX
  for (let i = 1; i <= 5; i++) {
    const nodes = document.querySelectorAll(`.bwl-logo-n${i}, .bwl-logo-a${i}`);
    if(selectedClass === "access-rank") {
        nodes.forEach(node => {
          if (node.classList.contains(`bwl-logo-n${i}`)) {
            node.classList.remove(`bwl-logo-n${i}`);
            node.classList.add(`bwl-logo-a${i}`);
          }
        });
    } else {
        nodes.forEach(node => {
          if (node.classList.contains(`bwl-logo-a${i}`)) {
            node.classList.remove(`bwl-logo-a${i}`);
            node.classList.add(`bwl-logo-n${i}`);
          }
        });
    }

  }

  map.classList.remove("access-rank", "needs-rank");
  map.classList.add(selectedClass);
}


  setInitialViewBox();
}

</script>
