---
const {} = Astro.props
---

<script is:inline>
const setDarkMode = () => {
    const isDarkModePreferred = () => {
        return localStorage.theme === "dark" ||
               (!("theme" in localStorage) && window.matchMedia("(prefers-color-scheme: dark)").matches);
    };

    const toggleClasses = (element, condition, classesOn, classesOff) => {
        classesOn.forEach(cls => element.classList.toggle(cls, condition));
        classesOff.forEach(cls => element.classList.toggle(cls, !condition));
    };

    const toggleDarkMode = () => {
        const isDark = document.documentElement.classList.toggle("dark");
        localStorage.theme = isDark ? "dark" : "light";
    };

    const preferredDarkMode = isDarkModePreferred();
    document.documentElement.classList.toggle("dark", preferredDarkMode);
    attachEvent("[data-aw-toggle-color-scheme]", "click", toggleDarkMode);
};
document.addEventListener("DOMContentLoaded", setDarkMode);
document.addEventListener("astro:after-swap", setDarkMode);


  const clearNoJsFeatures = () => {
    document.documentElement.classList.remove("no-js");
  }
  document.addEventListener("DOMContentLoaded", clearNoJsFeatures);
  document.addEventListener("astro:after-swap", clearNoJsFeatures);




  function attachEvent(selector, event, fn) {
    const matches = document.querySelectorAll(selector)
    if (matches && matches.length) {
      matches.forEach((elem) => {
        elem.addEventListener(
          event,
          function () {
            fn(elem)
          },
          false
        )
      })
    }
  }

  !function(t,e){var o,n,p,r;e.__SV||(window.posthog=e,e._i=[],e.init=function(i,s,a){function g(t,e){var o=e.split(".");2==o.length&&(t=t[o[0]],e=o[1]),t[e]=function(){t.push([e].concat(Array.prototype.slice.call(arguments,0)))}}(p=t.createElement("script")).type="text/javascript",p.crossOrigin="anonymous",p.async=!0,p.src=s.api_host.replace(".i.posthog.com","-assets.i.posthog.com")+"/static/array.js",(r=t.getElementsByTagName("script")[0]).parentNode.insertBefore(p,r);var u=e;for(void 0!==a?u=e[a]=[]:a="posthog",u.people=u.people||[],u.toString=function(t){var e="posthog";return"posthog"!==a&&(e+="."+a),t||(e+=" (stub)"),e},u.people.toString=function(){return u.toString(1)+".people (stub)"},o="init Ie Ts Ms Ee Es Rs capture Ge calculateEventProperties Os register register_once register_for_session unregister unregister_for_session js getFeatureFlag getFeatureFlagPayload isFeatureEnabled reloadFeatureFlags updateEarlyAccessFeatureEnrollment getEarlyAccessFeatures on onFeatureFlags onSurveysLoaded onSessionId getSurveys getActiveMatchingSurveys renderSurvey canRenderSurvey canRenderSurveyAsync identify setPersonProperties group resetGroups setPersonPropertiesForFlags resetPersonPropertiesForFlags setGroupPropertiesForFlags resetGroupPropertiesForFlags reset get_distinct_id getGroups get_session_id get_session_replay_url alias set_config startSessionRecording stopSessionRecording sessionRecordingStarted captureException loadToolbar get_property getSessionProperty Ds Fs createPersonProfile Ls Ps opt_in_capturing opt_out_capturing has_opted_in_capturing has_opted_out_capturing clear_opt_in_out_capturing Cs debug I As getPageViewId captureTraceFeedback captureTraceMetric".split(" "),n=0;n<o.length;n++)g(u,o[n]);e._i.push([i,s,a])},e.__SV=1)}(document,window.posthog||[]);
    posthog.init('phc_80DZ7R3LyBZXu7Va63emYUAeXDrHAV0XMZQF7yCnsW6', {
        api_host: 'https://us.i.posthog.com',
        defaults: '2025-05-24',
        person_profiles: 'identified_only', // or 'always' to create profiles for anonymous users as well
    })
</script>
